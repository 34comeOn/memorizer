// const dataBase = [
//     {
//         id: '63d264b1f97d7d9b9b3abbde',
//         filter: '',
//         repeatedTimeStamp: 1673874264971,  
//         timesBeenRepeated: 3,      
//         title: 'Что такое this?',
//         answer: `this - контекст вызова- это значение специального объекта Зис.
//         данное значение в контексте функций определяется вызывающей строной (caller"ом)
//         по форме вызова.
//         Если слева от скобок вызова (...) находится выражение типа reference type, то значит Зис 
//         будет являться БАЗОВЫЙ ОБЪЕКТ этого значения (base).
//         Для работы вызовов типа user.hi(), JavaScript использует трюк – точка '.' возвращает не саму функцию, а специальное значение «ссылочного типа», называемого Reference Type.
//         Этот ссылочный тип (Reference Type) является внутренним типом. Мы не можем явно использовать его, но он используется внутри языка.

//         Значение ссылочного типа – это «триплет»: комбинация из трёх значений (base, name, strict), где:

//         base – это объект.
//         name – это имя свойства объекта.
//         strict – это режим исполнения. Является true, если действует строгий режим (use strict).
//         Результатом доступа к свойству user.hi является не функция, а значение ссылочного типа. Для user.hi в строгом режиме оно будет таким:
//         (user, "hi", true)
//         Когда скобки () применяются к значению ссылочного типа (происходит вызов), то они получают полную информацию об объекте и его методе, и могут поставить правильный this (user в данном случае, по base).
//         Таким образом, значение this передаётся правильно, только если функция вызывается напрямую с использованием синтаксиса точки obj.method() или квадратных скобок obj['method']().

//         Во всех остальных случаях (другое значение отличное от reference), значением Зис всегда является null, что в последствии меняется на window
//         или undefined.
//         У стрелочных функций НЕТ this. Значение Зис берется снаружи. Также поэтому методы call, apply, bind не могут привязать контекст у стрелочной
//         функции.
//         Поскольку у стрелок нет this и super они "прозрачно" встраиваются во внешний контекст объектов instance"ов класса.`,
//     },    
// ];

// module.exports = dataBase;